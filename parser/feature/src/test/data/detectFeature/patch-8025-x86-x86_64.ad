@@ -319,6 +319,14 @@ reg_class int_rdi_reg(RDI);
 //----------SOURCE BLOCK-------------------------------------------------------
 // This is a block of C++ code which provides values, functions, and
 // definitions necessary in the rest of the architecture description
+
+source_hpp %{
+
+#include "peephole_x86_64.hpp"
+
+%}
+
+// Register masks
 source_hpp %{
 
 extern RegMask _ANY_REG_mask;
@@ -961,8 +969,8 @@ void MachEpilogNode::format(PhaseRegAlloc* ra_, outputStream* st) const
   st->print_cr("popq    rbp");
   if (do_polling() && C->is_method_compilation()) {
     st->print("\t");
-    st->print_cr("cmpq     rsp, poll_offset[r15_thread] \n\t"
-                 "ja       #safepoint_stub\t"
+    st->print_cr("cmpq    rsp, poll_offset[r15_thread] \n\t"
+                 "ja      #safepoint_stub\t"
                  "# Safepoint: poll for GC");
   }
 }
@@ -9001,6 +9009,19 @@ instruct umodL_rReg(rdx_RegL rdx, rax_RegL rax, no_rax_rdx_RegL div, rFlagsReg c
 %}
 
 // Integer Shift Instructions
+// Shift Left by one, two, three
+instruct salI_rReg_immI2(rRegI dst, immI2 shift, rFlagsReg cr)
+%{
+  match(Set dst (LShiftI dst shift));
+  effect(KILL cr);
+
+  format %{ "sall    $dst, $shift" %}
+  ins_encode %{
+    __ sall($dst$$Register, $shift$$constant);
+  %}
+  ins_pipe(ialu_reg);
+%}
+
 // Shift Left by 8-bit immediate
 instruct salI_rReg_imm(rRegI dst, immI8 shift, rFlagsReg cr)
 %{
@@ -9235,6 +9256,19 @@ instruct shrI_mem_rReg(rRegI dst, memory src, rRegI shift)
 %}
 
 // Long Shift Instructions
+// Shift Left by one, two, three
+instruct salL_rReg_immI2(rRegL dst, immI2 shift, rFlagsReg cr)
+%{
+  match(Set dst (LShiftL dst shift));
+  effect(KILL cr);
+
+  format %{ "salq    $dst, $shift" %}
+  ins_encode %{
+    __ salq($dst$$Register, $shift$$constant);
+  %}
+  ins_pipe(ialu_reg);
+%}
+
 // Shift Left by 8-bit immediate
 instruct salL_rReg_imm(rRegL dst, immI8 shift, rFlagsReg cr)
 %{
@@ -13541,8 +13575,21 @@ instruct tlsLoadP(r15_RegP dst) %{
 // These must follow all instruction definitions as they use the names
 // defined in the instructions definitions.
 //
+// peeppredicate ( rule_predicate );
+// // the predicate unless which the peephole rule will be ignored
+//
 // peepmatch ( root_instr_name [preceding_instruction]* );
 //
+// peepprocedure ( procedure_name );
+// // provide a procedure name to perform the optimization, the procedure should
+// // reside in the architecture dependent peephole file, the method has the
+// // signature of MachNode* (Block*, int, PhaseRegAlloc*, (MachNode*)(*)(), int...)
+// // with the arguments being the basic block, the current node index inside the
+// // block, the register allocator, the functions upon invoked return a new node
+// // defined in peepreplace, and the rules of the nodes appearing in the
+// // corresponding peepmatch, the function return true if successful, else
+// // return false
+//
 // peepconstraint %{
 // (instruction_number.operand_name relational_op instruction_number.operand_name
 //  [, ...] );
@@ -13563,10 +13610,7 @@ instruct tlsLoadP(r15_RegP dst) %{
 //
 // ---------CURRENT LIMITATIONS----------------------------------------------
 //
-// Only match adjacent instructions in same basic block
-// Only equality constraints
-// Only constraints between operands, not (0.dest_reg == RAX_enc)
-// Only one replacement instruction
+// Only transformations inside a basic block (do we need more for peephole)
 //
 // ---------EXAMPLE----------------------------------------------------------
 //
@@ -13582,8 +13626,21 @@ instruct tlsLoadP(r15_RegP dst) %{
 //   effect(KILL cr);
 // %}
 //
+// instruct leaI_rReg_immI(rRegI dst, immI_1 src)
+// %{
+//   match(Set dst (AddI dst src));
+// %}
+//
+// 1. Simple replacement
+// - Only match adjacent instructions in same basic block
+// - Only equality constraints
+// - Only constraints between operands, not (0.dest_reg == RAX_enc)
+// - Only one replacement instruction
+//
 // // Change (inc mov) to lea
 // peephole %{
+//   // lea should only be emitted when beneficial
+//   peeppredicate( VM_Version::supports_fast_2op_lea() );
 //   // increment preceded by register-register move
 //   peepmatch ( incI_rReg movI );
 //   // require that the destination register of the increment
@@ -13594,83 +13651,199 @@ instruct tlsLoadP(r15_RegP dst) %{
 //   peepreplace ( leaI_rReg_immI( 0.dst 1.src 0.src ) );
 // %}
 //
-
-// Implementation no longer uses movX instructions since
-// machine-independent system no longer uses CopyX nodes.
+// 2. Procedural replacement
+// - More flexible finding relevent nodes
+// - More flexible constraints
+// - More flexible transformations
+// - May utilise architecture-dependent API more effectively
+// - Currently only one replacement instruction due to adlc parsing capabilities
 //
-// peephole
-// %{
-//   peepmatch (incI_rReg movI);
-//   peepconstraint (0.dst == 1.dst);
-//   peepreplace (leaI_rReg_immI(0.dst 1.src 0.src));
+// // Change (inc mov) to lea
+// peephole %{
+//   // lea should only be emitted when beneficial
+//   peeppredicate( VM_Version::supports_fast_2op_lea() );
+//   // the rule numbers of these nodes inside are passed into the function below
+//   peepmatch ( incI_rReg movI );
+//   // the method that takes the responsibility of transformation
+//   peepprocedure ( inc_mov_to_lea );
+//   // the replacement is a leaI_rReg_immI, a lambda upon invoked creating this
+//   // node is passed into the function above
+//   peepreplace ( leaI_rReg_immI() );
 // %}
 
-// peephole
-// %{
-//   peepmatch (decI_rReg movI);
-//   peepconstraint (0.dst == 1.dst);
-//   peepreplace (leaI_rReg_immI(0.dst 1.src 0.src));
-// %}
+// These instructions is not matched by the matcher but used by the peephole
+instruct leaI_rReg_rReg_peep(rRegI dst, rRegI src1, rRegI src2)
+%{
+  predicate(false);
+  match(Set dst (AddI src1 src2));
+  format %{ "leal    $dst, [$src1 + $src2]" %}
+  ins_encode %{
+    Register dst = $dst$$Register;
+    Register src1 = $src1$$Register;
+    Register src2 = $src2$$Register;
+    if (src1 != rbp && src1 != r13) {
+      __ leal(dst, Address(src1, src2, Address::times_1));
+    } else {
+      assert(src2 != rbp && src2 != r13, "");
+      __ leal(dst, Address(src2, src1, Address::times_1));
+    }
+  %}
+  ins_pipe(ialu_reg_reg);
+%}
 
-// peephole
-// %{
-//   peepmatch (addI_rReg_imm movI);
-//   peepconstraint (0.dst == 1.dst);
-//   peepreplace (leaI_rReg_immI(0.dst 1.src 0.src));
-// %}
+instruct leaI_rReg_immI_peep(rRegI dst, rRegI src1, immI src2)
+%{
+  predicate(false);
+  match(Set dst (AddI src1 src2));
+  format %{ "leal    $dst, [$src1 + $src2]" %}
+  ins_encode %{
+    __ leal($dst$$Register, Address($src1$$Register, $src2$$constant));
+  %}
+  ins_pipe(ialu_reg_reg);
+%}
 
-// peephole
-// %{
-//   peepmatch (incL_rReg movL);
-//   peepconstraint (0.dst == 1.dst);
-//   peepreplace (leaL_rReg_immL(0.dst 1.src 0.src));
-// %}
+instruct leaI_rReg_immI2_peep(rRegI dst, rRegI src, immI2 shift)
+%{
+  predicate(false);
+  match(Set dst (LShiftI src shift));
+  format %{ "leal    $dst, [$src << $shift]" %}
+  ins_encode %{
+    Address::ScaleFactor scale = static_cast<Address::ScaleFactor>($shift$$constant);
+    Register src = $src$$Register;
+    if (scale == Address::times_2 && src != rbp && src != r13) {
+      __ leal($dst$$Register, Address(src, src, Address::times_1));
+    } else {
+      __ leal($dst$$Register, Address(noreg, src, scale));
+    }
+  %}
+  ins_pipe(ialu_reg_reg);
+%}
 
-// peephole
-// %{
-//   peepmatch (decL_rReg movL);
-//   peepconstraint (0.dst == 1.dst);
-//   peepreplace (leaL_rReg_immL(0.dst 1.src 0.src));
-// %}
+instruct leaL_rReg_rReg_peep(rRegL dst, rRegL src1, rRegL src2)
+%{
+  predicate(false);
+  match(Set dst (AddL src1 src2));
+  format %{ "leaq    $dst, [$src1 + $src2]" %}
+  ins_encode %{
+    Register dst = $dst$$Register;
+    Register src1 = $src1$$Register;
+    Register src2 = $src2$$Register;
+    if (src1 != rbp && src1 != r13) {
+      __ leaq(dst, Address(src1, src2, Address::times_1));
+    } else {
+      assert(src2 != rbp && src2 != r13, "");
+      __ leaq(dst, Address(src2, src1, Address::times_1));
+    }
+  %}
+  ins_pipe(ialu_reg_reg);
+%}
 
-// peephole
-// %{
-//   peepmatch (addL_rReg_imm movL);
-//   peepconstraint (0.dst == 1.dst);
-//   peepreplace (leaL_rReg_immL(0.dst 1.src 0.src));
-// %}
+instruct leaL_rReg_immL32_peep(rRegL dst, rRegL src1, immL32 src2)
+%{
+  predicate(false);
+  match(Set dst (AddL src1 src2));
+  format %{ "leaq    $dst, [$src1 + $src2]" %}
+  ins_encode %{
+    __ leaq($dst$$Register, Address($src1$$Register, $src2$$constant));
+  %}
+  ins_pipe(ialu_reg_reg);
+%}
 
-// peephole
-// %{
-//   peepmatch (addP_rReg_imm movP);
-//   peepconstraint (0.dst == 1.dst);
-//   peepreplace (leaP_rReg_imm(0.dst 1.src 0.src));
-// %}
+instruct leaL_rReg_immI2_peep(rRegL dst, rRegL src, immI2 shift)
+%{
+  predicate(false);
+  match(Set dst (LShiftL src shift));
+  format %{ "leaq    $dst, [$src << $shift]" %}
+  ins_encode %{
+    Address::ScaleFactor scale = static_cast<Address::ScaleFactor>($shift$$constant);
+    Register src = $src$$Register;
+    if (scale == Address::times_2 && src != rbp && src != r13) {
+      __ leaq($dst$$Register, Address(src, src, Address::times_1));
+    } else {
+      __ leaq($dst$$Register, Address(noreg, src, scale));
+    }
+  %}
+  ins_pipe(ialu_reg_reg);
+%}
 
-// // Change load of spilled value to only a spill
-// instruct storeI(memory mem, rRegI src)
-// %{
-//   match(Set mem (StoreI mem src));
-// %}
-//
-// instruct loadI(rRegI dst, memory mem)
-// %{
-//   match(Set dst (LoadI mem));
-// %}
-//
+peephole
+%{
+  peeppredicate(VM_Version::supports_fast_2op_lea());
+  peepmatch (addI_rReg);
+  peepprocedure (lea_coalesce_reg);
+  peepreplace (leaI_rReg_rReg_peep());
+%}
+
+peephole
+%{
+  peeppredicate(VM_Version::supports_fast_2op_lea());
+  peepmatch (addI_rReg_imm);
+  peepprocedure (lea_coalesce_imm);
+  peepreplace (leaI_rReg_immI_peep());
+%}
+
+peephole
+%{
+  peeppredicate(VM_Version::supports_fast_2op_lea());
+  peepmatch (incI_rReg);
+  peepprocedure (lea_coalesce_imm);
+  peepreplace (leaI_rReg_immI_peep());
+%}
+
+peephole
+%{
+  peeppredicate(VM_Version::supports_fast_2op_lea());
+  peepmatch (decI_rReg);
+  peepprocedure (lea_coalesce_imm);
+  peepreplace (leaI_rReg_immI_peep());
+%}
+
+peephole
+%{
+  peeppredicate(VM_Version::supports_fast_2op_lea());
+  peepmatch (salI_rReg_immI2);
+  peepprocedure (lea_coalesce_imm);
+  peepreplace (leaI_rReg_immI2_peep());
+%}
+
+peephole
+%{
+  peeppredicate(VM_Version::supports_fast_2op_lea());
+  peepmatch (addL_rReg);
+  peepprocedure (lea_coalesce_reg);
+  peepreplace (leaL_rReg_rReg_peep());
+%}
+
+peephole
+%{
+  peeppredicate(VM_Version::supports_fast_2op_lea());
+  peepmatch (addL_rReg_imm);
+  peepprocedure (lea_coalesce_imm);
+  peepreplace (leaL_rReg_immL32_peep());
+%}
+
+peephole
+%{
+  peeppredicate(VM_Version::supports_fast_2op_lea());
+  peepmatch (incL_rReg);
+  peepprocedure (lea_coalesce_imm);
+  peepreplace (leaL_rReg_immL32_peep());
+%}
 
 peephole
 %{
-  peepmatch (loadI storeI);
-  peepconstraint (1.src == 0.dst, 1.mem == 0.mem);
-  peepreplace (storeI(1.mem 1.mem 1.src));
+  peeppredicate(VM_Version::supports_fast_2op_lea());
+  peepmatch (decL_rReg);
+  peepprocedure (lea_coalesce_imm);
+  peepreplace (leaL_rReg_immL32_peep());
 %}
 
 peephole
 %{
-  peepmatch (loadL storeL);
-  peepconstraint (1.src == 0.dst, 1.mem == 0.mem);
-  peepreplace (storeL(1.mem 1.mem 1.src));
+  peeppredicate(VM_Version::supports_fast_2op_lea());
+  peepmatch (salL_rReg_immI2);
+  peepprocedure (lea_coalesce_imm);
+  peepreplace (leaL_rReg_immI2_peep());
 %}
 
 //----------SMARTSPILL RULES---------------------------------------------------