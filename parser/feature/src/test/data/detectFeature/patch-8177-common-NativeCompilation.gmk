@@ -358,6 +358,20 @@ define SetupCompileNativeFileBody
       # Compile as preprocessed assembler file
       $1_FLAGS := $(BASIC_ASFLAGS) $$($1_BASE_ASFLAGS)
       $1_COMPILER := $(AS)
+
+      # gcc assembly files must contain an appropriate relative .file
+      # path for reproducible builds.
+      ifeq ($(TOOLCHAIN_TYPE), gcc)
+        # If no absolute paths allowed, work out relative source file path
+        # for assembly .file substitution, otherwise use full file path
+        ifeq ($(ALLOW_ABSOLUTE_PATHS_IN_OUTPUT), false)
+          $1_REL_ASM_SRC := $$(call RelativePath, $$($1_FILE), $(WORKSPACE_ROOT))
+        else
+          $1_REL_ASM_SRC := $$($1_FILE)
+        endif
+        $1_FLAGS := $$($1_FLAGS) -DASSEMBLY_SRC_FILE='"$$($1_REL_ASM_SRC)"' \
+            -include $(TOPDIR)/make/data/autoheaders/assemblyprefix.h
+      endif
     else ifneq ($$(filter %.cpp %.cc %.mm, $$($1_FILENAME)), )
       # Compile as a C++ or Objective-C++ file
       $1_FLAGS := $(CFLAGS_CCACHE) $$($1_USE_PCH_FLAGS) $$($1_BASE_CXXFLAGS) \
@@ -1149,19 +1163,6 @@ define SetupNativeCompilationBody
       endif
     endif
 
-    # Debuginfo of ASM objects always embeds the absolute object path,
-    # as ASM debuginfo paths do not get prefix mapped.
-    # So for reproducible builds use relative paths to ensure a reproducible
-    # debuginfo and libs, when creating debug symbols.
-    ifeq ($$(ENABLE_REPRODUCIBLE_BUILD), true)
-      ifeq ($(call isTargetOs, linux), true)
-        ifeq ($$($1_COMPILE_WITH_DEBUG_SYMBOLS), true)
-          $1_LINK_OBJS_RELATIVE := true
-          $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)/%, %, $$($1_ALL_OBJS))
-        endif
-      endif
-    endif
-
     $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_MANIFEST) \
         $$($1_REAL_MAPFILE) $$($1_VARDEPS_FILE)
 