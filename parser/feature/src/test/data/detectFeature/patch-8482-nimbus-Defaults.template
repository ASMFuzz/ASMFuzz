@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -50,14 +50,12 @@ import java.awt.image.BufferedImage;
 import static java.awt.image.BufferedImage.*;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
-import java.lang.ref.WeakReference;
 import java.lang.reflect.Constructor;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.WeakHashMap;
 import javax.swing.border.Border;
 import javax.swing.plaf.UIResource;
@@ -682,7 +680,7 @@ ${UI_DEFAULT_INIT}
      * Get a derived color, derived colors are shared instances and will be
      * updated when its parent UIDefault color changes.
      *
-     * @param uiDefaultParentName The parent UIDefault key
+     * @param parentUin The parent UIDefault key
      * @param hOffset The hue offset
      * @param sOffset The saturation offset
      * @param bOffset The brightness offset
@@ -712,10 +710,10 @@ ${UI_DEFAULT_INIT}
                 bOffset, aOffset);
         }
 
-        if (derivedColors.containsKey(color)) {
-            return derivedColors.get(color);
+        DerivedColor prev = derivedColors.putIfAbsent(color, color);
+        if (prev != null) {
+            return prev;
         } else {
-            derivedColors.put(color, color);
             color.rederiveColor(); /// move to ARP.decodeColor() ?
             colorTree.addColor(uin, color);
             return color;